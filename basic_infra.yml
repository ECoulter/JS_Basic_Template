---
 
- hosts: localhost

  vars_files: 
     - clouds.yaml

  vars:
    internal_prefix: "{{ clouds.tacc.auth.username }}-{{ clouds.tacc.auth.project_name }}"
    network_cidr: '10.0.0.0/24'
    network_name: "{{ internal_prefix }}-network"
    subnet_name: "{{ internal_prefix }}-private-subnet"
    router_name: "{{ internal_prefix }}-router"
    cloud_name: "tacc" #this doesn't change for using the IU cloud! only the auth_url in clouds.yaml
    sec_group_global: "{{ internal_prefix }}-global"
    default_image: "JS-API-Featured-CentOS7-Dec-14-2018"
    JS_ssh_keyname: jecoulte-key

  tasks:

#Leaving this in as example!
#  - name: add user key to openstack
#    os_keypair:
#      cloud: "{{ cloud_name }}"
#      state: present
#      name: "{{ JS_ssh_keyname }}"
#      public_key_file: /etc/slurm/.ssh/id_rsa.pub

  - name: create a private network
    os_network:
      cloud: "{{ cloud_name }}"
      external: no
      name: "{{ network_name }}"

#  - name: Display all variables/facts known for a host
#    debug:
#      var: hostvars[inventory_hostname]
#      name: "{{ cloud.tacc.auth.username }}-{{ cloud.tacc.auth.project_name }}-private"

  - name: create security group for internal ports
    os_security_group:
      cloud: "{{ cloud_name }}"
      state: present
      name: "{{ sec_group_internal }}"
      description: security group for internal access

  - name: allow icmp internally
    os_security_group_rule:
      cloud: "{{ cloud_name }}"
      security_group: "{{ sec_group_internal }}"
      protocol: icmp
      remote_ip_prefix: "{{ network_cidr }}"

  - name: allow all tcp internally
    os_security_group_rule:
      cloud: "{{ cloud_name }}"
      security_group: "{{ sec_group_internal }}"
      protocol: tcp
      port_range_min: 1
      port_range_max: 65535
      remote_ip_prefix: "{{ network_cidr }}"

  - name: allow all udp internally
    os_security_group_rule:
      cloud: "{{ cloud_name }}"
      security_group: "{{ sec_group_internal }}"
      protocol: udp
      port_range_min: 1
      port_range_max: 65535
      remote_ip_prefix: "{{ network_cidr }}"

  - name: create public-facing security group
    os_security_group:
     cloud: "{{ cloud_name }}"
     state: present
     name: "{{ sec_group_global }}"
     description: security group for global access

  - name: allow icmp globally
    os_security_group_rule:
      cloud: "{{ cloud_name }}"
      security_group: "{{ sec_group_global }}"
      protocol: icmp
      remote_ip_prefix: "0.0.0.0/0"

  - name: allow ssh globally
    os_security_group_rule:
      cloud: "{{ cloud_name }}"
      security_group: "{{ sec_group_global }}"
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: "0.0.0.0/0"

  - name: allow https globally
    os_security_group_rule:
      cloud: "{{ cloud_name }}"
      security_group: "{{ sec_group_global }}"
      protocol: tcp
      port_range_min: 443
      port_range_max: 443
      remote_ip_prefix: "0.0.0.0/0"

  - name: create a subnet within private network
    os_subnet:
      state: present
      network_name: "{{ network_name }}"
      name: "{{ subnet_name }}"
      cidr: "{{ network_cidr }}"
      cloud: "{{ cloud_name }}"

  - name: create a router on the private network
    os_router:
      cloud: "{{ cloud_name }}"
      state: present
      name: "{{ router_name }}"
      network: public
      interfaces:
        - "{{ subnet_name }}"

  - name: build instances
    os_server:
      timeout: 300 
      state: present
      name: "{{ item.name }}"
      cloud: "{{ cloud_name }}"
      image: "{{ item.image }}"
      key_name: "{{ JS_ssh_keyname }}"
      security_groups: "{{ sec_group_global }}" #,{{ sec_group_internal }}"
      flavor: "{{ item.flavor }}"
      auto_ip: "yes"   #for public ip assignment
      network: "{{ network_name }}"
    loop: 
      - { name: "example-VM", flavor: "m1.small", image: "{{ default_image }}" }
      - { name: "example-VM2", flavor: "m1.medium", image: "{{ default_image }}" }
